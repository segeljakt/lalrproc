use crate::ast::Exp;
use crate::error::NoUserError;
use crate::token::{Token, Keyword};
use crate::span::Span;

grammar;

// Tokens

extern {
    type Error = NoUserError;
    type Location = Span;

    enum Token {
        // The delimiters needed by our grammar
        "(" => Token::Open(proc_macro::Delimiter::Parenthesis),
        ")" => Token::Close(proc_macro::Delimiter::Parenthesis),

        // The punctuation needed by our grammar
        "λ" => Token::Keyword(Keyword::Lambda),
        "." => Token::Punct('.'),
        Punct => Token::Punct(<char>),
        Joint => Token::Joint,

        // Other terminals in the grammar
        Ident => Token::Ident(<proc_macro::Ident>),
    }
}

// Macros

Box<T>: Box<T> = T => Box::new(<>);

// Parser

pub Exp: Exp = {
    <@L> "λ" <Ident> "." <Box<Exp>> => Exp::Abs(<>),
    Exp1,
};

Exp1: Exp = {
    @L Box<Exp1> Box<Exp2> => Exp::App(<>),
    Exp2,
};

Exp2: Exp = {
    @L Ident => Exp::Var(<>),
    "(" <Exp> ")"
};

